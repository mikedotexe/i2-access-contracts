{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Lists the available execute messages for this contract",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create"
      ],
      "properties": {
        "create": {
          "type": "object",
          "required": [
            "access_control",
            "access_control_identifier",
            "fund_limits",
            "skip_code_id_check",
            "target_contract"
          ],
          "properties": {
            "access_control": {
              "description": "The binary of the privileges / access control meant to be deserialized and applied to guard logic, so that authz exec is only called when the criteria is met. ex: the sender is allowed to call function X on the target contract",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "access_control_identifier": {
              "description": "Whatever access control we decide is best, we name it",
              "type": "string"
            },
            "extra": {
              "description": "To future-proof, let's allow people to chuck in more info",
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fund_limits": {
              "description": "Blanket rule that applies to how much funds can be sent",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "skip_code_id_check": {
              "description": "When the contract is instantiated, controls the preference toward confirming the code_id hasn't changed This can be overriden on the created contract",
              "type": "boolean"
            },
            "target_contract": {
              "description": "The contract the signer wishes to call, through this contract The authz execute will only happen if the key is allowed to call the given method, as defined by access control",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
